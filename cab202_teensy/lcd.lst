   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.LCDWrite,"ax",@progbits
  11               	.global	LCDWrite
  13               	LCDWrite:
  14               	.LFB7:
  15               		.file 1 "lcd.c"
   1:lcd.c         **** /*
   2:lcd.c         ****  *  CAB202 Teensy Library (cab202_teensy)
   3:lcd.c         ****  *	lcd.c
   4:lcd.c         ****  *
   5:lcd.c         ****  *	Michael, 32/13/2015 12:34:56 AM
   6:lcd.c         ****  *
   7:lcd.c         ****  */
   8:lcd.c         **** #include <avr/io.h>
   9:lcd.c         **** #include <avr/pgmspace.h>
  10:lcd.c         **** #include <util/delay.h>
  11:lcd.c         **** 
  12:lcd.c         **** #include "lcd.h"
  13:lcd.c         **** #include "ascii_font.h"
  14:lcd.c         **** #include "macros.h"
  15:lcd.c         **** 
  16:lcd.c         **** /*
  17:lcd.c         ****  * Function implementations
  18:lcd.c         ****  */
  19:lcd.c         **** void LCDWrite(unsigned char dc, unsigned char data) {
  16               		.loc 1 19 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  20:lcd.c         **** 	// Set the DC pin based on the parameter 'dc' (Hint: use the OUTPUT_WRITE macro)
  21:lcd.c         **** 	OUTPUT_WRITE(PORTB,DCPIN,dc);
  23               		.loc 1 21 0
  24 0000 25B1      		in r18,0x5
  25 0002 30E2      		ldi r19,lo8(32)
  26 0004 839F      		mul r24,r19
  27 0006 C001      		movw r24,r0
  28 0008 1124      		clr __zero_reg__
  29               	.LVL1:
  30 000a 2F7D      		andi r18,lo8(-33)
  31 000c 282B      		or r18,r24
  32 000e 25B9      		out 0x5,r18
  22:lcd.c         **** 
  23:lcd.c         **** 	// Pull the SCE/SS pin low to signal the LCD we have data
  24:lcd.c         **** 	OUTPUT_LOW(PORTD,SCEPIN);
  33               		.loc 1 24 0
  34 0010 5F98      		cbi 0xb,7
  35               	.LVL2:
  25:lcd.c         **** 
  26:lcd.c         **** 	// Write the byte of data using "bit bashing"
  27:lcd.c         **** 	int i;
  28:lcd.c         **** 	for(i = 7; i >= 0; i--) {
  36               		.loc 1 28 0
  37 0012 87E0      		ldi r24,lo8(7)
  38 0014 90E0      		ldi r25,0
  29:lcd.c         **** 		OUTPUT_LOW(PORTF, SCKPIN) ;
  30:lcd.c         **** 		if((data>>i) & (1 == 1)) {
  39               		.loc 1 30 0
  40 0016 70E0      		ldi r23,0
  41               	.LVL3:
  42               	.L5:
  29:lcd.c         **** 		OUTPUT_LOW(PORTF, SCKPIN) ;
  43               		.loc 1 29 0
  44 0018 8F98      		cbi 0x11,7
  45               		.loc 1 30 0
  46 001a 9B01      		movw r18,r22
  47 001c 082E      		mov r0,r24
  48 001e 00C0      		rjmp 2f
  49               		1:
  50 0020 3595      		asr r19
  51 0022 2795      		ror r18
  52               		2:
  53 0024 0A94      		dec r0
  54 0026 02F4      		brpl 1b
  55 0028 20FF      		sbrs r18,0
  56 002a 00C0      		rjmp .L2
  31:lcd.c         **** 			OUTPUT_HIGH(PORTB, DINPIN);
  57               		.loc 1 31 0
  58 002c 2E9A      		sbi 0x5,6
  59 002e 00C0      		rjmp .L3
  60               	.L2:
  32:lcd.c         **** 		} else {
  33:lcd.c         **** 			OUTPUT_LOW(PORTB, DINPIN);
  61               		.loc 1 33 0
  62 0030 2E98      		cbi 0x5,6
  63               	.L3:
  34:lcd.c         **** 		}
  35:lcd.c         **** 		OUTPUT_HIGH(PORTF, SCKPIN);
  64               		.loc 1 35 0
  65 0032 8F9A      		sbi 0x11,7
  28:lcd.c         **** 	for(i = 7; i >= 0; i--) {
  66               		.loc 1 28 0
  67               	.LVL4:
  68 0034 0197      		sbiw r24,1
  69 0036 00F4      		brcc .L5
  36:lcd.c         **** 	}
  37:lcd.c         **** 
  38:lcd.c         **** 	// Pull SCE/SS high to signal the LCD we are done
  39:lcd.c         **** 	OUTPUT_HIGH(PORTD,SCEPIN);
  70               		.loc 1 39 0
  71 0038 5F9A      		sbi 0xb,7
  72 003a 0895      		ret
  73               		.cfi_endproc
  74               	.LFE7:
  76               		.section	.text.LCDInitialise,"ax",@progbits
  77               	.global	LCDInitialise
  79               	LCDInitialise:
  80               	.LFB8:
  40:lcd.c         **** }
  41:lcd.c         **** 
  42:lcd.c         **** void LCDInitialise(unsigned char contrast) {
  81               		.loc 1 42 0
  82               		.cfi_startproc
  83               	.LVL5:
  84 0000 CF93      		push r28
  85               	.LCFI0:
  86               		.cfi_def_cfa_offset 3
  87               		.cfi_offset 28, -2
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  90               	/* stack size = 1 */
  91               	.L__stack_usage = 1
  92 0002 C82F      		mov r28,r24
  43:lcd.c         **** 	SET_OUTPUT(DDRD, SCEPIN);
  93               		.loc 1 43 0
  94 0004 579A      		sbi 0xa,7
  44:lcd.c         **** 	SET_OUTPUT(DDRB, RSTPIN);
  95               		.loc 1 44 0
  96 0006 249A      		sbi 0x4,4
  45:lcd.c         **** 	SET_OUTPUT(DDRB, DCPIN);
  97               		.loc 1 45 0
  98 0008 259A      		sbi 0x4,5
  46:lcd.c         **** 	SET_OUTPUT(DDRB, DINPIN);
  99               		.loc 1 46 0
 100 000a 269A      		sbi 0x4,6
  47:lcd.c         **** 	SET_OUTPUT(DDRF, SCKPIN);
 101               		.loc 1 47 0
 102 000c 879A      		sbi 0x10,7
  48:lcd.c         **** 
  49:lcd.c         **** 	OUTPUT_LOW(PORTB, RSTPIN);
 103               		.loc 1 49 0
 104 000e 2C98      		cbi 0x5,4
  50:lcd.c         **** 	OUTPUT_HIGH(PORTD, SCEPIN);
 105               		.loc 1 50 0
 106 0010 5F9A      		sbi 0xb,7
  51:lcd.c         **** 	OUTPUT_HIGH(PORTB, RSTPIN);
 107               		.loc 1 51 0
 108 0012 2C9A      		sbi 0x5,4
  52:lcd.c         **** 
  53:lcd.c         **** 	LCDWrite(LCD_C, 0x21); // Enable LCD extended command set
 109               		.loc 1 53 0
 110 0014 61E2      		ldi r22,lo8(33)
 111 0016 80E0      		ldi r24,0
 112               	.LVL6:
 113 0018 0E94 0000 		call LCDWrite
 114               	.LVL7:
  54:lcd.c         **** 	LCDWrite(LCD_C, 0x80 | contrast ); // Set LCD Vop (Contrast)
 115               		.loc 1 54 0
 116 001c 6C2F      		mov r22,r28
 117 001e 6068      		ori r22,lo8(-128)
 118 0020 80E0      		ldi r24,0
 119 0022 0E94 0000 		call LCDWrite
 120               	.LVL8:
  55:lcd.c         **** 	LCDWrite(LCD_C, 0x04);
 121               		.loc 1 55 0
 122 0026 64E0      		ldi r22,lo8(4)
 123 0028 80E0      		ldi r24,0
 124 002a 0E94 0000 		call LCDWrite
 125               	.LVL9:
  56:lcd.c         **** 	LCDWrite(LCD_C, 0x13); // LCD bias mode 1:48
 126               		.loc 1 56 0
 127 002e 63E1      		ldi r22,lo8(19)
 128 0030 80E0      		ldi r24,0
 129 0032 0E94 0000 		call LCDWrite
 130               	.LVL10:
  57:lcd.c         **** 
  58:lcd.c         **** 	LCDWrite(LCD_C, 0x0C); // LCD in normal mode.
 131               		.loc 1 58 0
 132 0036 6CE0      		ldi r22,lo8(12)
 133 0038 80E0      		ldi r24,0
 134 003a 0E94 0000 		call LCDWrite
 135               	.LVL11:
  59:lcd.c         ****   	LCDWrite(LCD_C, 0x20); // Enable LCD basic command set
 136               		.loc 1 59 0
 137 003e 60E2      		ldi r22,lo8(32)
 138 0040 80E0      		ldi r24,0
 139 0042 0E94 0000 		call LCDWrite
 140               	.LVL12:
  60:lcd.c         **** 	LCDWrite(LCD_C, 0x0C);
 141               		.loc 1 60 0
 142 0046 6CE0      		ldi r22,lo8(12)
 143 0048 80E0      		ldi r24,0
 144 004a 0E94 0000 		call LCDWrite
 145               	.LVL13:
  61:lcd.c         **** 
  62:lcd.c         **** 	LCDWrite(LCD_C, 0x40); // Reset row to 0
 146               		.loc 1 62 0
 147 004e 60E4      		ldi r22,lo8(64)
 148 0050 80E0      		ldi r24,0
 149 0052 0E94 0000 		call LCDWrite
 150               	.LVL14:
  63:lcd.c         **** 	LCDWrite(LCD_C, 0x80); // Reset column to 0
 151               		.loc 1 63 0
 152 0056 60E8      		ldi r22,lo8(-128)
 153 0058 80E0      		ldi r24,0
 154               	/* epilogue start */
  64:lcd.c         **** }
 155               		.loc 1 64 0
 156 005a CF91      		pop r28
 157               	.LVL15:
  63:lcd.c         **** 	LCDWrite(LCD_C, 0x80); // Reset column to 0
 158               		.loc 1 63 0
 159 005c 0C94 0000 		jmp LCDWrite
 160               	.LVL16:
 161               		.cfi_endproc
 162               	.LFE8:
 164               		.section	.text.LCDClear,"ax",@progbits
 165               	.global	LCDClear
 167               	LCDClear:
 168               	.LFB9:
  65:lcd.c         **** 
  66:lcd.c         **** void LCDClear(void) {
 169               		.loc 1 66 0
 170               		.cfi_startproc
 171 0000 CF93      		push r28
 172               	.LCFI1:
 173               		.cfi_def_cfa_offset 3
 174               		.cfi_offset 28, -2
 175 0002 DF93      		push r29
 176               	.LCFI2:
 177               		.cfi_def_cfa_offset 4
 178               		.cfi_offset 29, -3
 179               	/* prologue: function */
 180               	/* frame size = 0 */
 181               	/* stack size = 2 */
 182               	.L__stack_usage = 2
 183               	.LVL17:
 184               		.loc 1 66 0
 185 0004 C8EF      		ldi r28,lo8(-8)
 186 0006 D1E0      		ldi r29,lo8(1)
 187               	.LVL18:
 188               	.L10:
  67:lcd.c         **** 	int i;
  68:lcd.c         **** 	for (i = 0; i < LCD_X * LCD_Y / 8; i++) {
  69:lcd.c         **** 		LCDWrite(LCD_D, 0x00);
 189               		.loc 1 69 0 discriminator 2
 190 0008 60E0      		ldi r22,0
 191 000a 81E0      		ldi r24,lo8(1)
 192 000c 0E94 0000 		call LCDWrite
 193               	.LVL19:
 194 0010 2197      		sbiw r28,1
 195               	.LVL20:
  68:lcd.c         **** 	for (i = 0; i < LCD_X * LCD_Y / 8; i++) {
 196               		.loc 1 68 0 discriminator 2
 197 0012 2097      		sbiw r28,0
 198 0014 01F4      		brne .L10
 199               	/* epilogue start */
  70:lcd.c         **** 	}
  71:lcd.c         **** }
 200               		.loc 1 71 0
 201 0016 DF91      		pop r29
 202 0018 CF91      		pop r28
 203               	.LVL21:
 204 001a 0895      		ret
 205               		.cfi_endproc
 206               	.LFE9:
 208               		.section	.text.LCDCharacter,"ax",@progbits
 209               	.global	LCDCharacter
 211               	LCDCharacter:
 212               	.LFB10:
  72:lcd.c         **** 
  73:lcd.c         **** void LCDCharacter(unsigned char character) {
 213               		.loc 1 73 0
 214               		.cfi_startproc
 215               	.LVL22:
 216 0000 0F93      		push r16
 217               	.LCFI3:
 218               		.cfi_def_cfa_offset 3
 219               		.cfi_offset 16, -2
 220 0002 1F93      		push r17
 221               	.LCFI4:
 222               		.cfi_def_cfa_offset 4
 223               		.cfi_offset 17, -3
 224 0004 CF93      		push r28
 225               	.LCFI5:
 226               		.cfi_def_cfa_offset 5
 227               		.cfi_offset 28, -4
 228 0006 DF93      		push r29
 229               	.LCFI6:
 230               		.cfi_def_cfa_offset 6
 231               		.cfi_offset 29, -5
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 4 */
 235               	.L__stack_usage = 4
 236 0008 082F      		mov r16,r24
  74:lcd.c         **** 	/*
  75:lcd.c         **** 		Blank pixel column before the character, to increase readability
  76:lcd.c         **** 		Also, our font is only 5 pixels wide, since our LCD is 84 pixels wide
  77:lcd.c         **** 		we can fit twelve 7 pixel wide characters across.
  78:lcd.c         **** 	*/
  79:lcd.c         **** 	LCDWrite(LCD_D, 0x00);
 237               		.loc 1 79 0
 238 000a 60E0      		ldi r22,0
 239 000c 81E0      		ldi r24,lo8(1)
 240               	.LVL23:
 241 000e 0E94 0000 		call LCDWrite
 242               	.LVL24:
 243 0012 85E0      		ldi r24,lo8(5)
 244 0014 089F      		mul r16,r24
 245 0016 8001      		movw r16,r0
 246 0018 1124      		clr __zero_reg__
 247               	.LVL25:
  80:lcd.c         **** 
  81:lcd.c         **** 	int index;
  82:lcd.c         **** 	for (index = 0; index < 5; index++) {
 248               		.loc 1 82 0
 249 001a C0E0      		ldi r28,0
 250 001c D0E0      		ldi r29,0
 251 001e 0050      		subi r16,lo8(-(ASCII-160))
 252 0020 1040      		sbci r17,hi8(-(ASCII-160))
 253               	.LVL26:
 254               	.L13:
 255 0022 F801      		movw r30,r16
 256 0024 EC0F      		add r30,r28
 257 0026 FD1F      		adc r31,r29
 258               	.LBB2:
  83:lcd.c         **** 		// Write each of the 5 pixel rows to the LCD, we subtract 0x20 since
  84:lcd.c         **** 		// our table doesn't have the unprintable ASCII characters (...)
  85:lcd.c         **** 		LCDWrite(LCD_D, pgm_read_byte(&(ASCII[character - 0x20][index])));
 259               		.loc 1 85 0 discriminator 2
 260               	/* #APP */
 261               	 ;  85 "lcd.c" 1
 262 0028 6491      		lpm r22, Z
 263               		
 264               	 ;  0 "" 2
 265               	.LVL27:
 266               	/* #NOAPP */
 267               	.LBE2:
 268 002a 81E0      		ldi r24,lo8(1)
 269 002c 0E94 0000 		call LCDWrite
 270               	.LVL28:
  82:lcd.c         **** 	for (index = 0; index < 5; index++) {
 271               		.loc 1 82 0 discriminator 2
 272 0030 2196      		adiw r28,1
 273               	.LVL29:
 274 0032 C530      		cpi r28,5
 275 0034 D105      		cpc r29,__zero_reg__
 276 0036 01F4      		brne .L13
  86:lcd.c         **** 	}
  87:lcd.c         **** 
  88:lcd.c         **** 	LCDWrite(LCD_D, 0x00);
 277               		.loc 1 88 0
 278 0038 60E0      		ldi r22,0
 279 003a 81E0      		ldi r24,lo8(1)
 280               	/* epilogue start */
  89:lcd.c         **** }
 281               		.loc 1 89 0
 282 003c DF91      		pop r29
 283 003e CF91      		pop r28
 284               	.LVL30:
 285 0040 1F91      		pop r17
 286 0042 0F91      		pop r16
  88:lcd.c         **** 	LCDWrite(LCD_D, 0x00);
 287               		.loc 1 88 0
 288 0044 0C94 0000 		jmp LCDWrite
 289               	.LVL31:
 290               		.cfi_endproc
 291               	.LFE10:
 293               		.section	.text.LCDString,"ax",@progbits
 294               	.global	LCDString
 296               	LCDString:
 297               	.LFB11:
  90:lcd.c         **** 
  91:lcd.c         **** void LCDString(unsigned char *characters) {
 298               		.loc 1 91 0
 299               		.cfi_startproc
 300               	.LVL32:
 301 0000 CF93      		push r28
 302               	.LCFI7:
 303               		.cfi_def_cfa_offset 3
 304               		.cfi_offset 28, -2
 305 0002 DF93      		push r29
 306               	.LCFI8:
 307               		.cfi_def_cfa_offset 4
 308               		.cfi_offset 29, -3
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 2 */
 312               	.L__stack_usage = 2
 313 0004 EC01      		movw r28,r24
 314               	.LVL33:
 315               	.L15:
  92:lcd.c         **** 	while(*characters != 0){
 316               		.loc 1 92 0 discriminator 1
 317 0006 8991      		ld r24,Y+
 318               	.LVL34:
 319 0008 8823      		tst r24
 320 000a 01F0      		breq .L17
  93:lcd.c         **** 		LCDCharacter(*characters);
 321               		.loc 1 93 0
 322 000c 0E94 0000 		call LCDCharacter
 323               	.LVL35:
 324 0010 00C0      		rjmp .L15
 325               	.LVL36:
 326               	.L17:
 327               	/* epilogue start */
  94:lcd.c         **** 		characters++;
  95:lcd.c         **** 	}
  96:lcd.c         **** }
 328               		.loc 1 96 0
 329 0012 DF91      		pop r29
 330 0014 CF91      		pop r28
 331               	.LVL37:
 332 0016 0895      		ret
 333               		.cfi_endproc
 334               	.LFE11:
 336               		.section	.text.LCDPosition,"ax",@progbits
 337               	.global	LCDPosition
 339               	LCDPosition:
 340               	.LFB12:
  97:lcd.c         **** 
  98:lcd.c         **** void LCDPosition(unsigned char x, unsigned char y) {
 341               		.loc 1 98 0
 342               		.cfi_startproc
 343               	.LVL38:
 344 0000 CF93      		push r28
 345               	.LCFI9:
 346               		.cfi_def_cfa_offset 3
 347               		.cfi_offset 28, -2
 348               	/* prologue: function */
 349               	/* frame size = 0 */
 350               	/* stack size = 1 */
 351               	.L__stack_usage = 1
 352 0002 C82F      		mov r28,r24
  99:lcd.c         **** 	LCDWrite(LCD_C, (0x40 | y )); // Reset row to 0
 353               		.loc 1 99 0
 354 0004 6064      		ori r22,lo8(64)
 355               	.LVL39:
 356 0006 80E0      		ldi r24,0
 357               	.LVL40:
 358 0008 0E94 0000 		call LCDWrite
 359               	.LVL41:
 100:lcd.c         **** 	LCDWrite(LCD_C, (0x80 | x )); // Reset column to 0
 360               		.loc 1 100 0
 361 000c 6C2F      		mov r22,r28
 362 000e 6068      		ori r22,lo8(-128)
 363 0010 80E0      		ldi r24,0
 364               	/* epilogue start */
 101:lcd.c         **** }
 365               		.loc 1 101 0
 366 0012 CF91      		pop r28
 367               	.LVL42:
 100:lcd.c         **** 	LCDWrite(LCD_C, (0x80 | x )); // Reset column to 0
 368               		.loc 1 100 0
 369 0014 0C94 0000 		jmp LCDWrite
 370               	.LVL43:
 371               		.cfi_endproc
 372               	.LFE12:
 374               		.section	.progmem.data,"a",@progbits
 377               	ASCII:
 378 0000 00        		.byte	0
 379 0001 00        		.byte	0
 380 0002 00        		.byte	0
 381 0003 00        		.byte	0
 382 0004 00        		.byte	0
 383 0005 00        		.byte	0
 384 0006 00        		.byte	0
 385 0007 5F        		.byte	95
 386 0008 00        		.byte	0
 387 0009 00        		.byte	0
 388 000a 00        		.byte	0
 389 000b 07        		.byte	7
 390 000c 00        		.byte	0
 391 000d 07        		.byte	7
 392 000e 00        		.byte	0
 393 000f 14        		.byte	20
 394 0010 7F        		.byte	127
 395 0011 14        		.byte	20
 396 0012 7F        		.byte	127
 397 0013 14        		.byte	20
 398 0014 24        		.byte	36
 399 0015 2A        		.byte	42
 400 0016 7F        		.byte	127
 401 0017 2A        		.byte	42
 402 0018 12        		.byte	18
 403 0019 23        		.byte	35
 404 001a 13        		.byte	19
 405 001b 08        		.byte	8
 406 001c 64        		.byte	100
 407 001d 62        		.byte	98
 408 001e 36        		.byte	54
 409 001f 49        		.byte	73
 410 0020 55        		.byte	85
 411 0021 22        		.byte	34
 412 0022 50        		.byte	80
 413 0023 00        		.byte	0
 414 0024 05        		.byte	5
 415 0025 03        		.byte	3
 416 0026 00        		.byte	0
 417 0027 00        		.byte	0
 418 0028 00        		.byte	0
 419 0029 1C        		.byte	28
 420 002a 22        		.byte	34
 421 002b 41        		.byte	65
 422 002c 00        		.byte	0
 423 002d 00        		.byte	0
 424 002e 41        		.byte	65
 425 002f 22        		.byte	34
 426 0030 1C        		.byte	28
 427 0031 00        		.byte	0
 428 0032 14        		.byte	20
 429 0033 08        		.byte	8
 430 0034 3E        		.byte	62
 431 0035 08        		.byte	8
 432 0036 14        		.byte	20
 433 0037 08        		.byte	8
 434 0038 08        		.byte	8
 435 0039 3E        		.byte	62
 436 003a 08        		.byte	8
 437 003b 08        		.byte	8
 438 003c 00        		.byte	0
 439 003d 50        		.byte	80
 440 003e 30        		.byte	48
 441 003f 00        		.byte	0
 442 0040 00        		.byte	0
 443 0041 08        		.byte	8
 444 0042 08        		.byte	8
 445 0043 08        		.byte	8
 446 0044 08        		.byte	8
 447 0045 08        		.byte	8
 448 0046 00        		.byte	0
 449 0047 60        		.byte	96
 450 0048 60        		.byte	96
 451 0049 00        		.byte	0
 452 004a 00        		.byte	0
 453 004b 20        		.byte	32
 454 004c 10        		.byte	16
 455 004d 08        		.byte	8
 456 004e 04        		.byte	4
 457 004f 02        		.byte	2
 458 0050 3E        		.byte	62
 459 0051 51        		.byte	81
 460 0052 49        		.byte	73
 461 0053 45        		.byte	69
 462 0054 3E        		.byte	62
 463 0055 00        		.byte	0
 464 0056 42        		.byte	66
 465 0057 7F        		.byte	127
 466 0058 40        		.byte	64
 467 0059 00        		.byte	0
 468 005a 42        		.byte	66
 469 005b 61        		.byte	97
 470 005c 51        		.byte	81
 471 005d 49        		.byte	73
 472 005e 46        		.byte	70
 473 005f 21        		.byte	33
 474 0060 41        		.byte	65
 475 0061 45        		.byte	69
 476 0062 4B        		.byte	75
 477 0063 31        		.byte	49
 478 0064 18        		.byte	24
 479 0065 14        		.byte	20
 480 0066 12        		.byte	18
 481 0067 7F        		.byte	127
 482 0068 10        		.byte	16
 483 0069 27        		.byte	39
 484 006a 45        		.byte	69
 485 006b 45        		.byte	69
 486 006c 45        		.byte	69
 487 006d 39        		.byte	57
 488 006e 3C        		.byte	60
 489 006f 4A        		.byte	74
 490 0070 49        		.byte	73
 491 0071 49        		.byte	73
 492 0072 30        		.byte	48
 493 0073 01        		.byte	1
 494 0074 71        		.byte	113
 495 0075 09        		.byte	9
 496 0076 05        		.byte	5
 497 0077 03        		.byte	3
 498 0078 36        		.byte	54
 499 0079 49        		.byte	73
 500 007a 49        		.byte	73
 501 007b 49        		.byte	73
 502 007c 36        		.byte	54
 503 007d 06        		.byte	6
 504 007e 49        		.byte	73
 505 007f 49        		.byte	73
 506 0080 29        		.byte	41
 507 0081 1E        		.byte	30
 508 0082 00        		.byte	0
 509 0083 36        		.byte	54
 510 0084 36        		.byte	54
 511 0085 00        		.byte	0
 512 0086 00        		.byte	0
 513 0087 00        		.byte	0
 514 0088 56        		.byte	86
 515 0089 36        		.byte	54
 516 008a 00        		.byte	0
 517 008b 00        		.byte	0
 518 008c 08        		.byte	8
 519 008d 14        		.byte	20
 520 008e 22        		.byte	34
 521 008f 41        		.byte	65
 522 0090 00        		.byte	0
 523 0091 14        		.byte	20
 524 0092 14        		.byte	20
 525 0093 14        		.byte	20
 526 0094 14        		.byte	20
 527 0095 14        		.byte	20
 528 0096 00        		.byte	0
 529 0097 41        		.byte	65
 530 0098 22        		.byte	34
 531 0099 14        		.byte	20
 532 009a 08        		.byte	8
 533 009b 02        		.byte	2
 534 009c 01        		.byte	1
 535 009d 51        		.byte	81
 536 009e 09        		.byte	9
 537 009f 06        		.byte	6
 538 00a0 32        		.byte	50
 539 00a1 49        		.byte	73
 540 00a2 79        		.byte	121
 541 00a3 41        		.byte	65
 542 00a4 3E        		.byte	62
 543 00a5 7E        		.byte	126
 544 00a6 11        		.byte	17
 545 00a7 11        		.byte	17
 546 00a8 11        		.byte	17
 547 00a9 7E        		.byte	126
 548 00aa 7F        		.byte	127
 549 00ab 49        		.byte	73
 550 00ac 49        		.byte	73
 551 00ad 49        		.byte	73
 552 00ae 36        		.byte	54
 553 00af 3E        		.byte	62
 554 00b0 41        		.byte	65
 555 00b1 41        		.byte	65
 556 00b2 41        		.byte	65
 557 00b3 22        		.byte	34
 558 00b4 7F        		.byte	127
 559 00b5 41        		.byte	65
 560 00b6 41        		.byte	65
 561 00b7 22        		.byte	34
 562 00b8 1C        		.byte	28
 563 00b9 7F        		.byte	127
 564 00ba 49        		.byte	73
 565 00bb 49        		.byte	73
 566 00bc 49        		.byte	73
 567 00bd 41        		.byte	65
 568 00be 7F        		.byte	127
 569 00bf 09        		.byte	9
 570 00c0 09        		.byte	9
 571 00c1 09        		.byte	9
 572 00c2 01        		.byte	1
 573 00c3 3E        		.byte	62
 574 00c4 41        		.byte	65
 575 00c5 49        		.byte	73
 576 00c6 49        		.byte	73
 577 00c7 7A        		.byte	122
 578 00c8 7F        		.byte	127
 579 00c9 08        		.byte	8
 580 00ca 08        		.byte	8
 581 00cb 08        		.byte	8
 582 00cc 7F        		.byte	127
 583 00cd 00        		.byte	0
 584 00ce 41        		.byte	65
 585 00cf 7F        		.byte	127
 586 00d0 41        		.byte	65
 587 00d1 00        		.byte	0
 588 00d2 20        		.byte	32
 589 00d3 40        		.byte	64
 590 00d4 41        		.byte	65
 591 00d5 3F        		.byte	63
 592 00d6 01        		.byte	1
 593 00d7 7F        		.byte	127
 594 00d8 08        		.byte	8
 595 00d9 14        		.byte	20
 596 00da 22        		.byte	34
 597 00db 41        		.byte	65
 598 00dc 7F        		.byte	127
 599 00dd 40        		.byte	64
 600 00de 40        		.byte	64
 601 00df 40        		.byte	64
 602 00e0 40        		.byte	64
 603 00e1 7F        		.byte	127
 604 00e2 02        		.byte	2
 605 00e3 0C        		.byte	12
 606 00e4 02        		.byte	2
 607 00e5 7F        		.byte	127
 608 00e6 7F        		.byte	127
 609 00e7 04        		.byte	4
 610 00e8 08        		.byte	8
 611 00e9 10        		.byte	16
 612 00ea 7F        		.byte	127
 613 00eb 3E        		.byte	62
 614 00ec 41        		.byte	65
 615 00ed 41        		.byte	65
 616 00ee 41        		.byte	65
 617 00ef 3E        		.byte	62
 618 00f0 7F        		.byte	127
 619 00f1 09        		.byte	9
 620 00f2 09        		.byte	9
 621 00f3 09        		.byte	9
 622 00f4 06        		.byte	6
 623 00f5 3E        		.byte	62
 624 00f6 41        		.byte	65
 625 00f7 51        		.byte	81
 626 00f8 21        		.byte	33
 627 00f9 5E        		.byte	94
 628 00fa 7F        		.byte	127
 629 00fb 09        		.byte	9
 630 00fc 19        		.byte	25
 631 00fd 29        		.byte	41
 632 00fe 46        		.byte	70
 633 00ff 46        		.byte	70
 634 0100 49        		.byte	73
 635 0101 49        		.byte	73
 636 0102 49        		.byte	73
 637 0103 31        		.byte	49
 638 0104 01        		.byte	1
 639 0105 01        		.byte	1
 640 0106 7F        		.byte	127
 641 0107 01        		.byte	1
 642 0108 01        		.byte	1
 643 0109 3F        		.byte	63
 644 010a 40        		.byte	64
 645 010b 40        		.byte	64
 646 010c 40        		.byte	64
 647 010d 3F        		.byte	63
 648 010e 1F        		.byte	31
 649 010f 20        		.byte	32
 650 0110 40        		.byte	64
 651 0111 20        		.byte	32
 652 0112 1F        		.byte	31
 653 0113 3F        		.byte	63
 654 0114 40        		.byte	64
 655 0115 38        		.byte	56
 656 0116 40        		.byte	64
 657 0117 3F        		.byte	63
 658 0118 63        		.byte	99
 659 0119 14        		.byte	20
 660 011a 08        		.byte	8
 661 011b 14        		.byte	20
 662 011c 63        		.byte	99
 663 011d 07        		.byte	7
 664 011e 08        		.byte	8
 665 011f 70        		.byte	112
 666 0120 08        		.byte	8
 667 0121 07        		.byte	7
 668 0122 61        		.byte	97
 669 0123 51        		.byte	81
 670 0124 49        		.byte	73
 671 0125 45        		.byte	69
 672 0126 43        		.byte	67
 673 0127 00        		.byte	0
 674 0128 7F        		.byte	127
 675 0129 41        		.byte	65
 676 012a 41        		.byte	65
 677 012b 00        		.byte	0
 678 012c 02        		.byte	2
 679 012d 04        		.byte	4
 680 012e 08        		.byte	8
 681 012f 10        		.byte	16
 682 0130 20        		.byte	32
 683 0131 00        		.byte	0
 684 0132 41        		.byte	65
 685 0133 41        		.byte	65
 686 0134 7F        		.byte	127
 687 0135 00        		.byte	0
 688 0136 04        		.byte	4
 689 0137 02        		.byte	2
 690 0138 01        		.byte	1
 691 0139 02        		.byte	2
 692 013a 04        		.byte	4
 693 013b 40        		.byte	64
 694 013c 40        		.byte	64
 695 013d 40        		.byte	64
 696 013e 40        		.byte	64
 697 013f 40        		.byte	64
 698 0140 00        		.byte	0
 699 0141 01        		.byte	1
 700 0142 02        		.byte	2
 701 0143 04        		.byte	4
 702 0144 00        		.byte	0
 703 0145 20        		.byte	32
 704 0146 54        		.byte	84
 705 0147 54        		.byte	84
 706 0148 54        		.byte	84
 707 0149 78        		.byte	120
 708 014a 7F        		.byte	127
 709 014b 48        		.byte	72
 710 014c 44        		.byte	68
 711 014d 44        		.byte	68
 712 014e 38        		.byte	56
 713 014f 38        		.byte	56
 714 0150 44        		.byte	68
 715 0151 44        		.byte	68
 716 0152 44        		.byte	68
 717 0153 20        		.byte	32
 718 0154 38        		.byte	56
 719 0155 44        		.byte	68
 720 0156 44        		.byte	68
 721 0157 48        		.byte	72
 722 0158 7F        		.byte	127
 723 0159 38        		.byte	56
 724 015a 54        		.byte	84
 725 015b 54        		.byte	84
 726 015c 54        		.byte	84
 727 015d 18        		.byte	24
 728 015e 08        		.byte	8
 729 015f 7E        		.byte	126
 730 0160 09        		.byte	9
 731 0161 01        		.byte	1
 732 0162 02        		.byte	2
 733 0163 0C        		.byte	12
 734 0164 52        		.byte	82
 735 0165 52        		.byte	82
 736 0166 52        		.byte	82
 737 0167 3E        		.byte	62
 738 0168 7F        		.byte	127
 739 0169 08        		.byte	8
 740 016a 04        		.byte	4
 741 016b 04        		.byte	4
 742 016c 78        		.byte	120
 743 016d 00        		.byte	0
 744 016e 44        		.byte	68
 745 016f 7D        		.byte	125
 746 0170 40        		.byte	64
 747 0171 00        		.byte	0
 748 0172 20        		.byte	32
 749 0173 40        		.byte	64
 750 0174 44        		.byte	68
 751 0175 3D        		.byte	61
 752 0176 00        		.byte	0
 753 0177 7F        		.byte	127
 754 0178 10        		.byte	16
 755 0179 28        		.byte	40
 756 017a 44        		.byte	68
 757 017b 00        		.byte	0
 758 017c 00        		.byte	0
 759 017d 41        		.byte	65
 760 017e 7F        		.byte	127
 761 017f 40        		.byte	64
 762 0180 00        		.byte	0
 763 0181 7C        		.byte	124
 764 0182 04        		.byte	4
 765 0183 18        		.byte	24
 766 0184 04        		.byte	4
 767 0185 78        		.byte	120
 768 0186 7C        		.byte	124
 769 0187 08        		.byte	8
 770 0188 04        		.byte	4
 771 0189 04        		.byte	4
 772 018a 78        		.byte	120
 773 018b 38        		.byte	56
 774 018c 44        		.byte	68
 775 018d 44        		.byte	68
 776 018e 44        		.byte	68
 777 018f 38        		.byte	56
 778 0190 7C        		.byte	124
 779 0191 14        		.byte	20
 780 0192 14        		.byte	20
 781 0193 14        		.byte	20
 782 0194 08        		.byte	8
 783 0195 08        		.byte	8
 784 0196 14        		.byte	20
 785 0197 14        		.byte	20
 786 0198 18        		.byte	24
 787 0199 7C        		.byte	124
 788 019a 7C        		.byte	124
 789 019b 08        		.byte	8
 790 019c 04        		.byte	4
 791 019d 04        		.byte	4
 792 019e 08        		.byte	8
 793 019f 48        		.byte	72
 794 01a0 54        		.byte	84
 795 01a1 54        		.byte	84
 796 01a2 54        		.byte	84
 797 01a3 20        		.byte	32
 798 01a4 04        		.byte	4
 799 01a5 3F        		.byte	63
 800 01a6 44        		.byte	68
 801 01a7 40        		.byte	64
 802 01a8 20        		.byte	32
 803 01a9 3C        		.byte	60
 804 01aa 40        		.byte	64
 805 01ab 40        		.byte	64
 806 01ac 20        		.byte	32
 807 01ad 7C        		.byte	124
 808 01ae 1C        		.byte	28
 809 01af 20        		.byte	32
 810 01b0 40        		.byte	64
 811 01b1 20        		.byte	32
 812 01b2 1C        		.byte	28
 813 01b3 3C        		.byte	60
 814 01b4 40        		.byte	64
 815 01b5 30        		.byte	48
 816 01b6 40        		.byte	64
 817 01b7 3C        		.byte	60
 818 01b8 44        		.byte	68
 819 01b9 28        		.byte	40
 820 01ba 10        		.byte	16
 821 01bb 28        		.byte	40
 822 01bc 44        		.byte	68
 823 01bd 0C        		.byte	12
 824 01be 50        		.byte	80
 825 01bf 50        		.byte	80
 826 01c0 50        		.byte	80
 827 01c1 3C        		.byte	60
 828 01c2 44        		.byte	68
 829 01c3 64        		.byte	100
 830 01c4 54        		.byte	84
 831 01c5 4C        		.byte	76
 832 01c6 44        		.byte	68
 833 01c7 00        		.byte	0
 834 01c8 08        		.byte	8
 835 01c9 36        		.byte	54
 836 01ca 41        		.byte	65
 837 01cb 00        		.byte	0
 838 01cc 00        		.byte	0
 839 01cd 00        		.byte	0
 840 01ce 7F        		.byte	127
 841 01cf 00        		.byte	0
 842 01d0 00        		.byte	0
 843 01d1 00        		.byte	0
 844 01d2 41        		.byte	65
 845 01d3 36        		.byte	54
 846 01d4 08        		.byte	8
 847 01d5 00        		.byte	0
 848 01d6 10        		.byte	16
 849 01d7 08        		.byte	8
 850 01d8 08        		.byte	8
 851 01d9 10        		.byte	16
 852 01da 08        		.byte	8
 853 01db 78        		.byte	120
 854 01dc 46        		.byte	70
 855 01dd 41        		.byte	65
 856 01de 46        		.byte	70
 857 01df 78        		.byte	120
 858               		.text
 859               	.Letext0:
 860               		.file 2 "/usr/lib/avr/include/stdint.h"
 861               		.file 3 "ascii_font.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/cczqY71m.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczqY71m.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczqY71m.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczqY71m.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczqY71m.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczqY71m.s:13     .text.LCDWrite:0000000000000000 LCDWrite
     /tmp/cczqY71m.s:79     .text.LCDInitialise:0000000000000000 LCDInitialise
     /tmp/cczqY71m.s:167    .text.LCDClear:0000000000000000 LCDClear
     /tmp/cczqY71m.s:211    .text.LCDCharacter:0000000000000000 LCDCharacter
     /tmp/cczqY71m.s:377    .progmem.data:0000000000000000 ASCII
     /tmp/cczqY71m.s:296    .text.LCDString:0000000000000000 LCDString
     /tmp/cczqY71m.s:339    .text.LCDPosition:0000000000000000 LCDPosition

NO UNDEFINED SYMBOLS
